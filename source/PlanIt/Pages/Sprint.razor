@page "/sprint"
@using System.Security.Claims
@using System.Collections.ObjectModel
@using P4PlanLib.Model
@using PlanIt.Components.FilterToolbar
@using static Blazicons.Lucide
@inject IP4PlanClientProvider P4PlanClientProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject IProjectDetailsService ProjectDetailsService

<PageTitle>Sprint</PageTitle>

<h1>Sprint</h1>

@if (!HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
{
    <p>Please <NavLink href="/">Login to P4 Plan</NavLink> before accessing this dashboard</p>
}
else if (!loaded)
{
    <p>Loading...</p>
}
else
{
    <MudPaper Class="pa-3 mb-4" Elevation="1">
        <MudText Typo="Typo.h6">TODO: Charts burndown , velocity </MudText>
    </MudPaper>

    <MudPaper Class="pa-3 mb-4" Elevation="2">
        <MudStack Row="true">
            <MudStack Row="true" Spacing="2">
                <MudChip T="QuickFilterType"
                    Variant="@(selectedQuickFilter == QuickFilterType.Current ? Variant.Filled : Variant.Outlined)"
                    Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary"
                    OnClick="@(() => OnChipClick(QuickFilterType.Current))">Current sprint</MudChip>
                <MudChip T="QuickFilterType"
                    Variant="@(selectedQuickFilter == QuickFilterType.Past ? Variant.Filled : Variant.Outlined)"
                    Icon="@Icons.Material.Filled.ArrowCircleLeft" Color="Color.Primary"
                    OnClick="@(() => OnChipClick(QuickFilterType.Past))">Past sprint</MudChip>
                <MudChip T="QuickFilterType"
                    Variant="@(selectedQuickFilter == QuickFilterType.Future ? Variant.Filled : Variant.Outlined)"
                    Icon="@Icons.Material.Filled.ArrowCircleRight" Color="Color.Primary"
                    OnClick="@(() => OnChipClick(QuickFilterType.Future))">Future sprint</MudChip>
                <MudChip T="QuickFilterType"
                    Variant="@(selectedQuickFilter == QuickFilterType.None ? Variant.Filled : Variant.Outlined)"
                    Icon="@Icons.Material.Filled.Help" Color="Color.Primary"
                    OnClick="@(() => OnChipClick(QuickFilterType.None))">No sprint</MudChip>
            </MudStack>
            <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Filled.AddCircle" Clickable="true">Create sprint</MudChip>
            <MudSelect T="string" MultiSelection="true" Label="Team Aggregate" @bind-SelectedValues="selectedTeams"
                @bind-SelectedValues:after="ApplyQuickFilters" Dense="true" Class="ml-5">
                    @foreach (var t in availableTeams)
                    {
                        <MudSelectItem Value="@t">@t</MudSelectItem>
                    }
            </MudSelect>
        </MudStack>
    </MudPaper>

    <MudPaper Elevation="2" Class="pa-3 mb-4">
        <MudStack Row="true" Spacing="1" Class="mb-2">
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.Event">
                Start–End: <b>@(SprintStart?.ToString("dd MMM") ?? "-") – @(SprintEnd?.ToString("dd MMM") ?? "-")</b>
            </MudChip>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.Flag">
                Release: <b>@ProjectDetailsService.NextMilestoneName</b>
            </MudChip>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.ViewList">
                Total: <b>@(rankedList?.Count ?? 0)</b>
            </MudChip>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.Report">
                Showstoppers: <b>@ShowstoppersCount</b>
            </MudChip>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.BugReport">
                Bugs: <b>@BugsCount</b>
            </MudChip>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.AutoStories">
                Stories: <b>@StoriesCount</b>
            </MudChip>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.Checklist">
                Tasks: <b>@TasksCount</b>
            </MudChip>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Filled.Layers">
                Epics: <b>@EpicsCount</b>
            </MudChip>
        </MudStack>
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.Timelapse" Color="Color.Primary" />
            <MudText>Work Remaining: <b>@TotalWorkRemaining</b> D</MudText>
            <MudProgressLinear Style="min-width:180px" Color="Color.Success" Value="@WorkProgressPercent" />
        </MudStack>
    </MudPaper>
    <FilterToolbar TModel="Item" TargetItems="rankedList" OnApplyFilter="HandleFilterApplied" />

    <MudTable Items="@rankedList" Hover="true" Striped="true" Dense="true" Bordered="true" SortLabel="Sort by">
        <ColGroup>
            <col style="width: 20px;" />
            <col style="width: 30px;" />
            <col />
            <col style="width: 150px;" />
            <col style="width: 100px;" />
            <col style="width: 150px;" />
            <col style="width: 100px;" />
            <col style="width: 100px;" />
            <col style="width: 160px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.Rank)">
                    <MudTooltip Text="Rank is a value for Showstopper -> Sprint Items -> Bugs -> Backlog">Rank</MudTooltip>
                </MudTableSortLabel>
            </MudTh>
            <MudTh>Type</MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.Name)">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.SubprojectPath ?? string.Empty)">Team
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.CommittedTo?.Name ?? string.Empty)">
                    Sprint</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.BeautifulPriority)">Priority
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.Status)">Status</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.AssignedTo?.FirstOrDefault()?.User?.Name ?? string.Empty)">Assigned To
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x => x.WorkRemaining ?? 0)">Remaining / Estimated
                </MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Rank">@context.Rank</MudTd>
            <MudTd DataLabel="Type" Style=@($"{GetTypeBackgroundColor(TypeString(context))}")>
                <MudTooltip Text="@TypeString(context)">
                    <Blazicon Svg="TaskTypeToIcon(TypeString(context))" />
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="Name">
                <MudLink href=@($"/details/{context.Id}")>@context.Name</MudLink>
            </MudTd>
            <MudTd DataLabel="Team">@context.SubprojectPath</MudTd>
            <MudTd DataLabel="Sprint">@context.CommittedTo?.Name</MudTd>
            <MudTd DataLabel="Priority">@context.BeautifulPriority</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Color="@StatusColor(context.Status)" Icon="@StatusIcon(context.Status)" Variant="Variant.Text" Size="Size.Small">
                    @context.Status
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Assigned To">
                @if (context.AssignedTo != null && context.AssignedTo.Length > 0)
                {
                    var firstUser = context.AssignedTo.FirstOrDefault(a => a.User != null)?.User?.Name;
                    var count = context.AssignedTo.Count(a => a.User != null);
                    if (!string.IsNullOrEmpty(firstUser))
                    {
                        <MudText>@firstUser</MudText>
                    }
                    else
                    {
                        <MudText>unassigned</MudText>
                    }
                }
                else
                {
                    <MudText>unassigned</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Work remaining">
                <MudProgressLinear Color="Color.Primary" Value="@RowProgressPercent(context)" />
                <MudText Typo="Typo.caption">@((context.WorkRemaining ?? 0).ToString("F1")) / @context.EstimatedDays d</MudText>
            </MudTd>

        </RowTemplate>
    </MudTable>
}

@code {
    private bool loaded { get; set; }
    public enum QuickFilterType { Current, Past, Future, None }
    private List<Item> allItems = new();
    private List<Item> rankedList = new();
    private IEnumerable<string> selectedTeams = new HashSet<string>();
    private HashSet<string> availableTeams = new(StringComparer.OrdinalIgnoreCase);
    private QuickFilterType selectedQuickFilter = QuickFilterType.Current;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false && !loaded)
        {
            var email = HttpContextAccessor.HttpContext?.User.Claims.First(c => c.Type == ClaimTypes.Email).Value;
            var p4PlanClient = P4PlanClientProvider.GetP4PlanClient(email);
            if (p4PlanClient is null)
            {
                Navigation.NavigateTo("/");
                return;
            }

            var items = await p4PlanClient.Search("");
            allItems = items ?? new List<Item>();

            // Extract available teams from SubprojectPath
            foreach (var item in allItems)
            {
                if (!string.IsNullOrWhiteSpace(item.SubprojectPath))
                {
                    availableTeams.Add(item.SubprojectPath);
                }
            }

            loaded = true;

            // Apply initial filter (Current sprint by default)
            ApplyQuickFilters();

            StateHasChanged();
        }
    }

    private void OnQuickFilterChanged()
    {
        ApplyQuickFilters();
    }

    private void OnChipClick(QuickFilterType filterType)
    {
        selectedQuickFilter = filterType;
        ApplyQuickFilters();
    }

    private void ApplyQuickFilters()
    {
        if (allItems == null || !allItems.Any())
        {
            rankedList = new List<Item>();
            return;
        }

        var filtered = allItems.AsEnumerable();

        // Apply quick filter
        filtered = selectedQuickFilter switch
        {
            QuickFilterType.Current => filtered.Where(x => x.CommittedTo?.Name == ProjectDetailsService.CurrentSprint),
            QuickFilterType.Past => filtered.Where(x => x.CommittedTo != null && IsPastSprint(x.CommittedTo.Name)),
            QuickFilterType.Future => filtered.Where(x => x.CommittedTo != null && IsFutureSprint(x.CommittedTo.Name)),
            QuickFilterType.None => filtered.Where(x => x.CommittedTo == null || x.CommittedTo.Name == "Backlog"),
            _ => filtered
        };

        // Apply team filter
        if (selectedTeams.Any())
        {
            filtered = filtered.Where(x => !string.IsNullOrWhiteSpace(x.SubprojectPath) &&
            selectedTeams.Contains(x.SubprojectPath));
        }

        rankedList = filtered.ToList();

        // Add ranking for display
        for (var i = 0; i < rankedList.Count; i++)
        {
            rankedList[i].Rank = i + 1;
        }

        StateHasChanged();
    }

    private void HandleFilterApplied(FilterResult<Item> result)
    {
        rankedList?.Clear();
        if (result.FilteredItems != null && rankedList != null)
        {
            foreach (var item in result.FilteredItems)
            {
                rankedList.Add(item);
            }

            // Add ranking for display
            for (var i = 0; i < rankedList.Count; i++)
            {
                rankedList[i].Rank = i + 1;
            }
        }
        StateHasChanged();
    }

    private bool IsPastSprint(string sprintName)
    {
        // Extract sprint number from "Sprint X" format
        if (sprintName.StartsWith("Sprint ") && int.TryParse(sprintName.Substring(7), out int sprintNumber))
        {
            if (ProjectDetailsService.CurrentSprint.StartsWith("Sprint ") &&
            int.TryParse(ProjectDetailsService.CurrentSprint.Substring(7), out int currentSprintNumber))
            {
                return sprintNumber < currentSprintNumber;
            }
        }
        return false;
    }

    private bool IsFutureSprint(string sprintName)
    {
        // Extract sprint number from "Sprint X" format
        if (sprintName.StartsWith("Sprint ") && int.TryParse(sprintName.Substring(7), out int sprintNumber))
        {
            if (ProjectDetailsService.CurrentSprint.StartsWith("Sprint ") &&
            int.TryParse(ProjectDetailsService.CurrentSprint.Substring(7), out int currentSprintNumber))
            {
                return sprintNumber > currentSprintNumber;
            }
        }
        return false;
    }

    private SvgIcon TaskTypeToIcon(string type)
    {
        return type switch
        {
            "Epic" => Layers,
            "Story" => Rocket,
            "Task" => Clipboard,
            "Bug" => Bug,
            _ => CircleQuestionMark
        };
    }

    private string GetTypeBackgroundColor(string type)
    {
        return type switch
        {
            "Bug" => "background: #EEEE88;",
            "Epic" => "background: #E8F4FD;",
            "Story" => "background: #F0F8E8;",
            "Task" => "background: #FFF8E1;",
            _ => ""
        };
    }

    private string TypeString(Item i)
    {
        if (!string.IsNullOrWhiteSpace(i.Name))
        {
            if (i.Name.StartsWith("Epic", StringComparison.OrdinalIgnoreCase)) return "Epic";
            if (i.Name.StartsWith("Story", StringComparison.OrdinalIgnoreCase)) return "Story";
            if (i.Name.StartsWith("Task", StringComparison.OrdinalIgnoreCase)) return "Task";
            if (i.Name.Contains("Bug", StringComparison.OrdinalIgnoreCase)) return "Bug";
        }
        return i.Type.ToString();
    }

    private Color StatusColor(string? status)
    {
        return (status ?? string.Empty) switch
        {
            "New" => Color.Default,
            "To Do" => Color.Info,
            "In Progress" => Color.Warning,
            "In Review" => Color.Primary,
            "Done" => Color.Success,
            "Blocked" => Color.Error,
            "On Hold" => Color.Warning,
            _ => Color.Default
        };
    }

    private string StatusIcon(string? status)
    {
        return (status ?? string.Empty) switch
        {
            "New" => Icons.Material.Filled.FiberNew,
            "To Do" => Icons.Material.Filled.Schedule,
            "In Progress" => Icons.Material.Filled.Autorenew,
            "In Review" => Icons.Material.Filled.Visibility,
            "Done" => Icons.Material.Filled.CheckCircle,
            "Blocked" => Icons.Material.Filled.Block,
            "On Hold" => Icons.Material.Filled.PauseCircle,
            _ => Icons.Material.Filled.Help
        };
    }

    private DateTime? SprintStart
    {
        get
        {
            var dates = rankedList?.Where(i => i.StartDate.HasValue).Select(i => i.StartDate!.Value).OrderBy(d => d);
            return dates != null && dates.Any() ? dates.First() : (DateTime?)null;
        }
    }

    private DateTime? SprintEnd
    {
        get
        {
            var dates = rankedList?.Where(i => i.EndDate.HasValue).Select(i => i.EndDate!.Value).OrderByDescending(d => d);
            return dates != null && dates.Any() ? dates.First() : (DateTime?)null;
        }
    }

    private double TotalWorkRemaining => rankedList?.Sum(i => (double)(i.WorkRemaining ?? 0)) ?? 0;
    private double TotalEstimated => rankedList?.Sum(i => (double)i.EstimatedDays) ?? 0;
    private double WorkProgressPercent => TotalEstimated > 0 ? Math.Clamp(TotalWorkRemaining / TotalEstimated * 100.0, 0, 100) : 0;
    private double RowProgressPercent(Item i) => i.EstimatedDays > 0 ? Math.Clamp(((i.WorkRemaining ?? 0) / i.EstimatedDays) * 100.0, 0, 100) : 0;

    private int ShowstoppersCount => rankedList?.Count(i => string.Equals(i.Severity, "Critical", StringComparison.OrdinalIgnoreCase) || i.Name.StartsWith("Critical Bug", StringComparison.OrdinalIgnoreCase)) ?? 0;
    private int BugsCount => rankedList?.Count(i => (TypeString(i) == "Bug") && !string.Equals(i.Severity, "Critical", StringComparison.OrdinalIgnoreCase)) ?? 0;
    private int StoriesCount => rankedList?.Count(i => TypeString(i) == "Story") ?? 0;
    private int TasksCount => rankedList?.Count(i => TypeString(i) == "Task") ?? 0;
    private int EpicsCount => rankedList?.Count(i => TypeString(i) == "Epic") ?? 0;

}