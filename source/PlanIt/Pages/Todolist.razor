@page "/todolist"
@using GraphQL
@using System.Security.Claims
@using P4PlanLib.Model
@using PlanIt.Components.FilterToolbar
@inject HttpClient Http
@inject IP4PlanClientProvider P4PlanClientProvider
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IProjectDetailsService ProjectDetailsService;

<PageTitle>Todolist</PageTitle>

<h1>My Todo list</h1>

@if(!HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
{
    <p>Please <NavLink href="/">Login to P4 Plan</NavLink> before accessing this dashboard</p>
} else if(!loaded)
{
    <p>Loading...</p>
}
else
{
    <MudText>Ordered by Showstoppers > Sprint tasks > Open bugs not in sprint > Backlog</MudText>
    <FilterToolbar TModel="Item" TargetItems="rankedList" OnApplyFilter="HandleFilterApplied" />

    <MudTable Items="rankedList" Hover="true" Striped="true" Dense="true" Bordered="true" SortLabel="Sort by">
        <ColGroup>
            <col style="width: 50px;" />
            <col style="width: 50px;" />
            <col />
            <col style="width: 120px;" />
            <col style="width: 120px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x=>x.Rank)"><MudTooltip Text="Rank is a value for Showstopper -> Sprint Items -> Bugs -> Backlog">Rank</MudTooltip></MudTableSortLabel></MudTh>
            <MudTh>Type</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x=>x.BeautifulPriority)">Priority</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<P4PlanLib.Model.Item, object>(x=>x.EstimatedDays)">Hours remaining</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Rank">@context.Rank</MudTd>
            <MudTd DataLabel="Type" Style=@($"{GetTypeBackgroundColor(TypeString(context))}")><MudTooltip Text="@TypeString(context)"><Blazicon Svg="TaskTypeToIcon(TypeString(context))" /></MudTooltip></MudTd>
            <MudTd DataLabel="Name">
                @if (string.IsNullOrEmpty(context.SubprojectPath))
                {
                    <span><MudLink href=@($"/details/{context.Id}")>@context.Name</MudLink></span>
                }
                else
                {
                    <span>@context.SubprojectPath / <MudLink href=@($"/details/{context.Id}")>@context.Name</MudLink></span>
                }
            </MudTd>
            <MudTd DataLabel="Priority">@context.BeautifulPriority</MudTd>
            <MudTd DataLabel="Work remaining">@(context.WorkRemaining?.ToString("F1") ?? "0")</MudTd>
        </RowTemplate>
    </MudTable>

    <MudSpacer/>
}

@code {
    private List<P4PlanLib.Model.Item>? mySprintItems { get; set; }
    private List<P4PlanLib.Model.Item>? myOpenBugs { get; set; }
    private List<P4PlanLib.Model.Item>? myOpenShowstoppers { get; set; }
    private List<P4PlanLib.Model.Item>? myBacklog { get; set; }
    private List<P4PlanLib.Model.Item>? rankedList { get; set; }
    private bool loaded { get; set; } = false;
    private bool showEmptyCategories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false && !loaded)
        {
            var email = HttpContextAccessor.HttpContext?.User.Claims.First(c => c.Type == ClaimTypes.Email).Value;
            var p4PlanClient = P4PlanClientProvider.GetP4PlanClient(email);
            if (p4PlanClient is null)
            {
                Navigation.NavigateTo("/");
                return;
            }
            var allItems = await p4PlanClient.GetTodoListAsync("");

            // Categorize items by type for ranking
            myOpenShowstoppers = allItems.Where(i => TypeString(i) == "Showstopper").ToList();
            mySprintItems = allItems.Where(i => TypeString(i) == "Sprint").ToList();
            myOpenBugs = allItems.Where(i => TypeString(i) == "Bug").ToList();
            myBacklog = allItems.Where(i => TypeString(i) == "Backlog").ToList();

            // Build ranked list: Showstoppers > Sprint items > Open bugs > Backlog
            rankedList = new List<P4PlanLib.Model.Item>();
            rankedList.AddRange(myOpenShowstoppers);
            rankedList.AddRange(mySprintItems);
            rankedList.AddRange(myOpenBugs);
            rankedList.AddRange(myBacklog);
            for(var i = 0 ; i < rankedList.Count ; i++)
            {
                rankedList[i].Rank = i + 1;
            }

            loaded = true;
            StateHasChanged();
        }
    }

    private void NavigateToDetails(string id)
    {
        Navigation.NavigateTo($"/details/{id}");
    }

    private SvgIcon TaskTypeToIcon(string type)
    {
        return type switch
        {
            "Showstopper" => Lucide.OctagonMinus,
            "Sprint" => Lucide.Rocket,
            "Backlog" => Lucide.Clipboard,
            "Bug" => Lucide.Bug,
            _ => Lucide.CircleQuestionMark
        };
    }

    private string GetTypeBackgroundColor(string type)
    {
        return type switch
        {
            "Showstopper" => "background: #EE8888;",
            "Bug" => "background: #EEEE88;",
            _ => ""
        };
    }
    private void HandleFilterApplied(FilterResult<Item> result)
    {
        rankedList?.Clear();
        if (result.FilteredItems != null)
        {
            foreach (var item in result.FilteredItems)
            {
                rankedList?.Add(item);
            }
        }
    }

    private string TypeString(Item i)
    {
        // First, infer by severity/name if it's clearly a showstopper or bug
        if (string.Equals(i.Severity, "Critical", StringComparison.OrdinalIgnoreCase))
            return "Showstopper";
        if (!string.IsNullOrWhiteSpace(i.Name) && i.Name.Contains("Bug", StringComparison.OrdinalIgnoreCase))
            return "Bug";

        // Next, use commitment to decide Sprint vs Backlog
        if (i.CommittedTo?.Name == ProjectDetailsService.CurrentSprint)
            return "Sprint";

        // Fallback to model enum
        switch (i.Type)
        {
            case ItemType.Bug: return "Bug";
            case ItemType.Sprint: return "Sprint";
            case ItemType.BacklogTask: return "Backlog";
            case ItemType.ScheduledTask: return "Task";
            case ItemType.Release: return "Release";
            default: return i.Type.ToString();
        }
    }

}
