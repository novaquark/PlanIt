@typeparam TModel
@using P4PlanLib
@using MudBlazor
@using P4PlanLib.Model
@using PlanIt.Components.FilterToolbar
@using Microsoft.AspNetCore.WebUtilities

<MudPaper Class="pa-4">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudStack Row="true" Spacing="1">
            <MudButton Variant="@((Criteria.Unfinished) ? Variant.Filled : Variant.Outlined)" Color="Color.Primary" OnClick="@(()=>Toggle(nameof(Criteria.Unfinished)))" StartIcon="@Icons.Material.Filled.NotStarted">Unfinished</MudButton>
                <MudButton Variant="@((Criteria.OnlyMyTasks) ? Variant.Filled : Variant.Outlined)" Color="Color.Primary" OnClick="@(()=>Toggle(nameof(Criteria.OnlyMyTasks)))" StartIcon="@Icons.Material.Filled.Person">Only My Tasks</MudButton>
                <MudButton Variant="@((Criteria.PriorityVeryHigh) ? Variant.Filled : Variant.Outlined)" Color="Color.Secondary" OnClick="@(()=>Toggle(nameof(Criteria.PriorityVeryHigh)))" StartIcon="@Icons.Material.Filled.PriorityHigh">Very High</MudButton>
                <MudButton Variant="@((Criteria.PriorityHigh) ? Variant.Filled : Variant.Outlined)" Color="Color.Warning" OnClick="@(()=>Toggle(nameof(Criteria.PriorityHigh)))" StartIcon="@Icons.Material.Filled.PriorityHigh">High</MudButton>
                <MudButton Variant="@((Criteria.PriorityOther) ? Variant.Filled : Variant.Outlined)" Color="Color.Info" OnClick="@(()=>Toggle(nameof(Criteria.PriorityOther)))" StartIcon="@Icons.Material.Filled.LowPriority">Other</MudButton>
            </MudStack>
        </MudItem>

        @* This will be add back later if required  
         <MudItem xs="12" sm="6" md="3">
            <MudSelect T="string" Label="Priority" Value="Criteria.Priority" ValueChanged="@(v => OnSelectChanged(nameof(Criteria.Priority), v))" Dense="true" Clearable="true" Searchable="true">
                @if (Priorities != null)
                {
                    @foreach(var p in Priorities) { <MudSelectItem Value="@p">@((new Item { Priority = p }).BeautifulPriority)</MudSelectItem> }
                }
            </MudSelect>
        </MudItem> *@

        @if (!HideSprintSelector)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" Label="Sprint" Value="Criteria.Sprint" ValueChanged="@(v => OnSelectChanged(nameof(Criteria.Sprint), v))" Dense="true" Clearable="true" Searchable="true">
                    @if (Sprints != null)
                    {
                        @foreach(var p in Sprints) { <MudSelectItem Value="@p">@p</MudSelectItem> }
                    }
                </MudSelect>
            </MudItem>
        }

        <MudItem xs="12" sm="6" md="3">
            <MudAutocomplete T="string" Label="Assigned To" Value="Criteria.Assignee" ValueChanged="@(v => OnTextChanged(nameof(Criteria.Assignee), v))" Dense="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Person" SearchFunc="SearchAssignees" Clearable="true" />
        </MudItem>

        <MudItem xs="12">
            <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="Justify.SpaceBetween">
                <div>
                    <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.FilterAlt" OnClick="@ApplyFilters">Refresh</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Clear" OnClick="@Cancel">Reset</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Share" OnClick="@ShareFilters">Share</MudButton>
                </div>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter] public IEnumerable<TModel> TargetItems { get; set; } = new List<TModel>();
    [Parameter] public EventCallback<FilterResult<TModel>> OnApplyFilter { get; set; }
    [Parameter] public EventCallback<bool> OnBusyChanged { get; set; }
    [Parameter] public bool HideSprintSelector { get; set; } = false;
    [Inject] private IP4PlanClientProvider P4PlanClientProvider { get; set; } = null!;
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private IJSRuntime JS { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    private FilterCriteria Criteria { get; set; } = new();

    private List<TModel> _originalItems = new();

    IEnumerable<string>? Priorities, Sprints;
    private IP4PlanClient? _client;

    private bool _filtersLoadedFromQuery = false;
    private bool _applyFromQueryPending = false;
    private bool _userInteracted = false;
    private bool _isBusy = false;


    protected override void OnParametersSet()
    {
        if (TargetItems != null)
        {
            var incoming = TargetItems.ToList();
            _originalItems = incoming; 
        }
        if (_applyFromQueryPending && _originalItems.Count > 0)
        {
            _applyFromQueryPending = false;
            _ = ApplyFilters();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var email = GetCurrentUserEmail();
        _client = P4PlanClientProvider.GetP4PlanClient(email);
        if (_client != null)
        {
            Priorities = await SafeCall(() => _client.GetPrioritiesAsync());
            Sprints = await SafeCall(() => _client.GetSprintsAsync());
        }
        await LoadFiltersFromQuery();
    }

    private async Task LoadFiltersFromQuery()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var q = QueryHelpers.ParseQuery(uri.Query);
            bool any = false;

            if (q.TryGetValue("sprint", out var sprint)) { Criteria.Sprint = sprint.ToString(); any = true; }
            if (q.TryGetValue("assignee", out var assignee)) { Criteria.Assignee = assignee.ToString(); any = true; }
            if (q.TryGetValue("onlyMine", out var onlyMine)) { Criteria.OnlyMyTasks = onlyMine.ToString() == "1"; any = true; }
            if (q.TryGetValue("unfinished", out var unfinished)) { Criteria.Unfinished = unfinished.ToString() == "1"; any = true; }
            if (q.TryGetValue("vh", out var vh)) { Criteria.PriorityVeryHigh = vh.ToString() == "1"; any = true; }
            if (q.TryGetValue("h", out var h)) { Criteria.PriorityHigh = h.ToString() == "1"; any = true; }
            if (q.TryGetValue("o", out var o)) { Criteria.PriorityOther = o.ToString() == "1"; any = true; }

            _filtersLoadedFromQuery = any;
            if (any)
            {
                if (_originalItems.Count > 0)
                    await ApplyFilters();
                else
                    _applyFromQueryPending = true;
            }
        }
        catch { }
    }

    private string BuildShareUrl()
    {
        var baseUri = Navigation.ToAbsoluteUri(Navigation.Uri).GetLeftPart(UriPartial.Path);
        var dict = new Dictionary<string, string?>();
        if (!string.IsNullOrWhiteSpace(Criteria.Sprint)) dict["sprint"] = Criteria.Sprint!;
        if (!string.IsNullOrWhiteSpace(Criteria.Assignee)) dict["assignee"] = Criteria.Assignee!;
        if (Criteria.OnlyMyTasks) dict["onlyMine"] = "1";
        if (Criteria.Unfinished) dict["unfinished"] = "1";
        if (Criteria.PriorityVeryHigh) dict["vh"] = "1";
        if (Criteria.PriorityHigh) dict["h"] = "1";
        if (Criteria.PriorityOther) dict["o"] = "1";
        return QueryHelpers.AddQueryString(baseUri, dict);
    }

    private async Task ShareFilters()
    {
        var url = BuildShareUrl();
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", url);
        Snackbar.Add("Shareable link copied to clipboard", Severity.Success);
    }

    private string? GetCurrentUserEmail()
    {
        return HttpContextAccessor?.HttpContext?.User?.FindFirst("emails")?.Value
               ?? HttpContextAccessor?.HttpContext?.User?.Identity?.Name;
    }

    private string? GetCurrentUserDisplayName()
    {
        return HttpContextAccessor?.HttpContext?.User?.Identity?.Name
               ?? GetCurrentUserEmail();
    }

    private Task<IEnumerable<string>> SearchAssignees(string value, CancellationToken _)
    {
        if (_client == null) return Task.FromResult<IEnumerable<string>>(Array.Empty<string>());
        return _client.GetAssigneesAsync(value);
    }

    private async Task<IEnumerable<string>> SafeCall(Func<Task<IEnumerable<string>>> fn)
    {
        try
        {
            return await fn();
        }
        catch
        {
            return Array.Empty<string>();
        }
    }

    private void Toggle(string propName)
    {
        switch (propName)
        {
            case nameof(Criteria.OnlyMyTasks): Criteria.OnlyMyTasks = !Criteria.OnlyMyTasks; break;
            case nameof(Criteria.Unfinished): Criteria.Unfinished = !Criteria.Unfinished; break;
            case nameof(Criteria.PriorityVeryHigh): Criteria.PriorityVeryHigh = !Criteria.PriorityVeryHigh; break;
            case nameof(Criteria.PriorityHigh): Criteria.PriorityHigh = !Criteria.PriorityHigh; break;
            case nameof(Criteria.PriorityOther): Criteria.PriorityOther = !Criteria.PriorityOther; break;
        }
        _userInteracted = true;
        _ = ApplyFilters();
    }


    private void OnSelectChanged(string propName, string? value)
    {
        switch (propName)
        {
            case nameof(Criteria.Sprint): Criteria.Sprint = value; break;
        }
        _userInteracted = true;
        _ = ApplyFilters();
    }

    private void OnTextChanged(string propName, string? value)
    {
        switch (propName)
        {
            case nameof(Criteria.Assignee): Criteria.Assignee = value; break;
        }
        _userInteracted = true;
        _ = ApplyFilters();
    }


    public async Task ReapplyAsync()
    {
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        if (_isBusy) return;
        _isBusy = true;
        await OnBusyChanged.InvokeAsync(true);

        var source = TargetItems?.ToList() ?? new List<TModel>();
        var filtered = source.ToList();

        // Current user info for OnlyMyTasks
        var currentEmail = GetCurrentUserEmail();
        var currentName = GetCurrentUserDisplayName();

        // Only my tasks
        if (Criteria.OnlyMyTasks)
        {
            filtered = filtered.Where(item =>
            {
                if (item is Item it)
                {
                    var assignees = it.AssignedTo?.Select(a => a.User?.Name).Where(n => !string.IsNullOrWhiteSpace(n)) ?? Enumerable.Empty<string>();
                    return assignees.Any(n => string.Equals(n, currentEmail, StringComparison.OrdinalIgnoreCase) || string.Equals(n, currentName, StringComparison.OrdinalIgnoreCase));
                }
                // Fallback: try reflection for a string AssignedTo
                var prop = item?.GetType().GetProperty("AssignedTo");
                var val = prop?.GetValue(item)?.ToString();
                return !string.IsNullOrEmpty(val) && (string.Equals(val, currentEmail, StringComparison.OrdinalIgnoreCase) || string.Equals(val, currentName, StringComparison.OrdinalIgnoreCase));
            }).ToList();
        }

        // Priority toggle filters
        if (Criteria.PriorityVeryHigh || Criteria.PriorityHigh || Criteria.PriorityOther)
        {
            filtered = filtered.Where(item =>
            {
                string? pr = null;
                if (item is Item it) pr = it.Priority;
                else pr = item?.GetType().GetProperty("Priority")?.GetValue(item)?.ToString();

                var isVH = string.Equals(pr, "veryHigh", StringComparison.OrdinalIgnoreCase);
                var isH = string.Equals(pr, "high", StringComparison.OrdinalIgnoreCase);
                var isOther = !isVH && !isH;

                return (Criteria.PriorityVeryHigh && isVH)
                    || (Criteria.PriorityHigh && isH)
                    || (Criteria.PriorityOther && isOther);
            }).ToList();
        }

        // Sprint filter
        if (!string.IsNullOrWhiteSpace(Criteria.Sprint))
        {
            filtered = filtered.Where(item =>
            {
                if (item is Item it)
                {
                    return string.Equals(it.CommittedTo?.Name, Criteria.Sprint, StringComparison.OrdinalIgnoreCase);
                }
                var prop = item?.GetType().GetProperty("CommittedTo");
                var nameProp = prop?.GetValue(item)?.GetType().GetProperty("Name");
                var val = nameProp?.GetValue(prop?.GetValue(item))?.ToString();
                return string.Equals(val, Criteria.Sprint, StringComparison.OrdinalIgnoreCase);
            }).ToList();
        }

        // Unfinished filter
        if (Criteria.Unfinished)
        {
            filtered = filtered.Where(item =>
            {
                if (item is Item it)
                {
                    return !EqualsStatus(it.Status, "Done");
                }
                var prop = item?.GetType().GetProperty("Status");
                var val = prop?.GetValue(item)?.ToString();
                return !EqualsStatus(val, "Done");
            }).ToList();
        }


        static bool EqualsStatus(string? a, string b) => string.Equals(a, b, StringComparison.OrdinalIgnoreCase);

        // Assignee contains text
        if (!string.IsNullOrWhiteSpace(Criteria.Assignee))
        {
            filtered = filtered.Where(item =>
            {
                if (item is Item it)
                {
                    var assignees = it.AssignedTo?.Select(a => a.User?.Name).Where(n => !string.IsNullOrWhiteSpace(n)) ?? Enumerable.Empty<string>();
                    return assignees.Any(n => n.Contains(Criteria.Assignee!, StringComparison.OrdinalIgnoreCase));
                }
                var prop = item?.GetType().GetProperty("AssignedTo");
                var val = prop?.GetValue(item)?.ToString();
                return !string.IsNullOrEmpty(val) && val.Contains(Criteria.Assignee!, StringComparison.OrdinalIgnoreCase);
            }).ToList();
        }

        await OnApplyFilter.InvokeAsync(new FilterResult<TModel>
        {
            Criteria = Criteria,
            FilteredItems = filtered
        });

        _isBusy = false;
        await OnBusyChanged.InvokeAsync(false);
    }

    private async void Cancel()
    {
        Criteria.Reset();
        // Reset to currently provided data from parent
        _isBusy = true;
        await OnBusyChanged.InvokeAsync(true);
        await OnApplyFilter.InvokeAsync(new FilterResult<TModel>
        {
            Criteria = Criteria,
            FilteredItems = TargetItems?.ToList() ?? new List<TModel>()
        });
        _isBusy = false;
        await OnBusyChanged.InvokeAsync(false);
    }

}
