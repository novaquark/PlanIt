@using P4PlanLib.Model
@using System.Security.Claims
@inject IP4PlanClientProvider P4PlanClientProvider
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
<MudStack Spacing="2" Style="min-width:300px;">

    <!-- Header -->
    <MudText Typo="Typo.h6" FontWeight="FontWeight.SemiBold">
        Comments (@comments.Count)
    </MudText>

    <!-- Comments List -->
    <MudPaper Elevation="3" Class="rounded-xl bg-white"
              Style="flex:1;min-height:300px;max-height:400px;overflow:hidden;display:flex;flex-direction:column;">

        @if (comments.Count == 0)
        {
            <MudStack AlignItems="AlignItems.Center" JustifyContent="Center" Spacing="1" Class="py-8 text-gray-400">
                <MudText Typo="Typo.h4">üí¨</MudText>
                <MudText Typo="Typo.body2">No comments yet. Be the first to comment!</MudText>
            </MudStack>
        }
        else
        {
            <MudStack Spacing="3">
                @foreach (var comment in comments)
                {
                    <MudPaper Class="pb-4 border-b border-gray-100" Elevation="0">
                        <!-- Comment Header -->
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                            <UserComponent Users="@GetCommentUser(comment)"
                                           DisplayMode="UserComponent.UserDisplayMode.CommentAvatar" />
                            <MudStack Style="flex:1;min-width:0;">
                                <MudText Typo="Typo.body2" FontWeight="FontWeight.SemiBold" Color="Color.Default">
                                    @(comment.PostedBy?.Name ?? "Unknown User")
                                </MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @comment.PostedAt
                                </MudText>
                            </MudStack>
                        </MudStack>

                        <!-- Comment Text -->
                        <MudText Typo="Typo.body2" Class="ml-10 text-gray-700" Style="white-space:pre-wrap;">
                            @comment.Text
                        </MudText>

                        <!-- Attachments -->
                        @if (comment.Attachments != null && comment.Attachments.Length > 0)
                        {
                            <MudStack Class="ml-10 mt-3">
                                <MudText Typo="Typo.caption" FontWeight="FontWeight.Medium" Color="Color.Secondary">
                                    üìé Attachments
                                </MudText>
                                <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1">
                                    @foreach (var att in comment.Attachments)
                                    {
                                        <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined" Class="text-sm">
                                            <span class="font-medium">@att.Path</span>
                                            <span class="text-gray-400 ml-1">(@att.Size bytes)</span>
                                        </MudChip>
                                    }
                                </MudStack>
                            </MudStack>
                        }
                    </MudPaper>
                }
            </MudStack>
        }

    </MudPaper>

    <!-- Comment Input -->
    <MudPaper Elevation="3" Class="rounded-xl bg-white pa-6">
        <MudText Typo="Typo.h6" FontWeight="FontWeight.SemiBold" Class="mb-4">
            Add a comment
        </MudText>

        <MudTextField @bind-Value="newCommentText"
                      Placeholder="Write your comment here..."
                      Lines="4"
                      Variant="Variant.Outlined"
                      Class="w-full mb-4"
                      Immediate="true"
                      OnBlur="@(async _ => await PostCommentAsync(newCommentText))" />

        <MudStack Row="true" JustifyContent="SpaceBetween" AlignItems="AlignItems.Center">
            <MudButton OnClick="@(async () => await PostCommentAsync(newCommentText))"
                       Variant="Variant.Filled"
                       Disabled="@((string.IsNullOrWhiteSpace(newCommentText) || postingComment))"
                       Color="Color.Primary"
                       Class="font-semibold">
                @if (postingComment)
                {
                    <MudText Typo="Typo.body2">üîÑ Posting...</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">Post Comment</MudText>
                }
            </MudButton>

            @if (!string.IsNullOrEmpty(postCommentError))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="text-sm">
                    ‚ö†Ô∏è @postCommentError
                </MudAlert>
            }
        </MudStack>
    </MudPaper>
</MudStack>

@code {
    [Parameter]
    public string? Id { get; set; }
    private List<Comment> comments = new();
    private string newCommentText = string.Empty;
    private bool postingComment = false;
    private string postCommentError = string.Empty;
    private P4PlanLib.IP4PlanClient? p4PlanClient;
    protected override async Task OnInitializedAsync()
    {
        if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
        {
            var displayName = HttpContextAccessor.HttpContext?.User.Claims.First(c => c.Type == ClaimTypes.Name).Value;
            var email = HttpContextAccessor.HttpContext?.User.Claims.First(c => c.Type == ClaimTypes.Email).Value;
            p4PlanClient = P4PlanClientProvider.GetP4PlanClient(email);
            if (p4PlanClient is null)
            {
                Navigation.NavigateTo("/");
                return;
            }
            if (!string.IsNullOrEmpty(Id))
            {
                comments = await p4PlanClient.GetComments(Id);
            }
        }
    }
    private async Task PostCommentAsync(string commentText)
    {
        if (p4PlanClient is null)
            return;

        postCommentError = string.Empty;
        postingComment = true;
        try
        {
            if (!string.IsNullOrEmpty(Id))
            {
                var success = await p4PlanClient.PostComment(Id, commentText);
                if (success)
                {
                    newCommentText = string.Empty;
                    comments = await p4PlanClient.GetComments(Id);
                }
                else
                {
                    postCommentError = "Failed to post comment.";
                }
            }
            else
            {
                postCommentError = "Invalid item id.";
            }
        }
        catch (Exception ex)
        {
            postCommentError = ex.Message;
        }
        postingComment = false;
        StateHasChanged();
    }

    private IEnumerable<string> GetCommentUser(Comment comment)
    {
        if (!string.IsNullOrWhiteSpace(comment.PostedBy?.Name))
            return new[] { comment.PostedBy.Name };
        return new[] { "Unknown User" };
    }
}
